<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://xmlns.tibco.com/2003/5/bw/plugins/tcp" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx4="http://www.rbsas.co/schemas/CanonicalModel/CanonicalModel 1.0.0/Core/CardInfo.xsd" xmlns:pfx3="http://www.rbsas.co/schemas/CanonicalModel/CanonicalModel 1.0.0/Core/CardUser.xsd" xmlns:pfx2="http://www.rbsas.co/schemas/RBDAL/Schemas/Version 1.0.0/BusinessObjects/CardInfo.xsd" xmlns:pfx="http://www.rbsas.co/schemas/RBDAL/Schemas/Version 1.0.0/BusinessObjects/CardUser.xsd">
    <xsd:import namespace="http://www.rbsas.co/schemas/RBDAL/Schemas/Version 1.0.0/BusinessObjects/CardUser.xsd" schemaLocation="/Personalization.CORE/Schemas/BusinessObjects/CardUser.xsd"/>
    <xsd:import namespace="http://www.rbsas.co/schemas/RBDAL/Schemas/Version 1.0.0/BusinessObjects/CardInfo.xsd" schemaLocation="/Personalization.CORE/Schemas/BusinessObjects/CardInfo.xsd"/>
    <xsd:import namespace="http://www.rbsas.co/schemas/CanonicalModel/CanonicalModel 1.0.0/Core/CardUser.xsd" schemaLocation="/Personalization.CORE/Schemas/CannonicalModel/CardUser.xsd"/>
    <xsd:import namespace="http://www.rbsas.co/schemas/CanonicalModel/CanonicalModel 1.0.0/Core/CardInfo.xsd" schemaLocation="/Personalization.CORE/Schemas/CannonicalModel/CardInfo.xsd"/>
    <pd:name>Personalization.CORE/Implementation/SetCardInfo/SetUserImageMapper.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="Card" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="User">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element ref="pfx:User"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="Payer" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element ref="pfx:User"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element ref="pfx2:CardInfo" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>42</pd:startX>
    <pd:startY>91</pd:startY>
    <pd:returnBindings>
        <root>
            <xsl:for-each select="$Start/root/Card">
                <Card>
                    <User>
                        <pfx3:CardUser>
                            <xsl:if test="User/pfx:User/pfx:Name">
                                <pfx3:Name>
                                    <xsl:value-of select="User/pfx:User/pfx:Name"/>
                                </pfx3:Name>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:LastName">
                                <pfx3:LastName>
                                    <xsl:value-of select="User/pfx:User/pfx:LastName"/>
                                </pfx3:LastName>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:SecondLastName">
                                <pfx3:SecondLastName>
                                    <xsl:value-of select="User/pfx:User/pfx:SecondLastName"/>
                                </pfx3:SecondLastName>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:IdTypeCode">
                                <pfx3:IdTypeCode>
                                    <xsl:value-of select="User/pfx:User/pfx:IdTypeCode"/>
                                </pfx3:IdTypeCode>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:IdNumber">
                                <pfx3:IdNumber>
                                    <xsl:value-of select="User/pfx:User/pfx:IdNumber"/>
                                </pfx3:IdNumber>
                            </xsl:if>
                            <xsl:if test="exists(User/pfx:User/pfx:BirthDate)">
                                <pfx3:BirthDate>
                                    <xsl:value-of select="tib:create-dateTime(&#xA;&#x9;tib:get-year-from-dateTime(current()/User/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-month-from-dateTime(current()/User/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-day-from-dateTime(current()/User/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-hours-from-dateTime(current()/User/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-minutes-from-dateTime(current()/User/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-seconds-from-dateTime(current()/User/pfx:User/pfx:BirthDate)&#xA;)"/>
                                </pfx3:BirthDate>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:Address">
                                <pfx3:Address>
                                    <xsl:value-of select="User/pfx:User/pfx:Address"/>
                                </pfx3:Address>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:ScholarityCode">
                                <pfx3:ScholarityCode>
                                    <xsl:value-of select="User/pfx:User/pfx:ScholarityCode"/>
                                </pfx3:ScholarityCode>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:Scholarity">
                                <pfx3:Scholarity>
                                    <xsl:value-of select="User/pfx:User/pfx:Scholarity"/>
                                </pfx3:Scholarity>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:Gender">
                                <pfx3:Gender>
                                    <xsl:value-of select="User/pfx:User/pfx:Gender"/>
                                </pfx3:Gender>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:Email">
                                <pfx3:Email>
                                    <xsl:value-of select="User/pfx:User/pfx:Email"/>
                                </pfx3:Email>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:Phone">
                                <pfx3:Phone>
                                    <xsl:value-of select="User/pfx:User/pfx:Phone"/>
                                </pfx3:Phone>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:Mobile">
                                <pfx3:Mobile>
                                    <xsl:value-of select="User/pfx:User/pfx:Mobile"/>
                                </pfx3:Mobile>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:Occupation">
                                <pfx3:Occupation>
                                    <xsl:value-of select="User/pfx:User/pfx:Occupation"/>
                                </pfx3:Occupation>
                            </xsl:if>
                            <xsl:if test="User/pfx:User/pfx:AuthorizeDataUse">
                                <pfx3:AuthorizeDataUse>
                                    <xsl:value-of select="User/pfx:User/pfx:AuthorizeDataUse"/>
                                </pfx3:AuthorizeDataUse>
                            </xsl:if>
                            <xsl:if test="exists(User/pfx:User/pfx:LastUpdate)">
                                <pfx3:LastUpdate>
                                    <xsl:value-of select="tib:create-dateTime(&#xA;&#x9;tib:get-year-from-dateTime(current()/User/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-month-from-dateTime(current()/User/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-day-from-dateTime(current()/User/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-hours-from-dateTime(current()/User/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-minutes-from-dateTime(current()/User/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-seconds-from-dateTime(current()/User/pfx:User/pfx:LastUpdate)&#xA;)"/>
                                </pfx3:LastUpdate>
                            </xsl:if>
                        </pfx3:CardUser>
                    </User>
                    <xsl:if test="exists(Payer)">
                        <Payer>
                            <pfx3:CardUser>
                                <pfx3:Name>
                                    <xsl:value-of select="Payer/pfx:User/pfx:Name"/>
                                </pfx3:Name>
                                <xsl:if test="Payer/pfx:User/pfx:LastName">
                                    <pfx3:LastName>
                                        <xsl:value-of select="Payer/pfx:User/pfx:LastName"/>
                                    </pfx3:LastName>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:SecondLastName">
                                    <pfx3:SecondLastName>
                                        <xsl:value-of select="Payer/pfx:User/pfx:SecondLastName"/>
                                    </pfx3:SecondLastName>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:IdTypeCode">
                                    <pfx3:IdTypeCode>
                                        <xsl:value-of select="Payer/pfx:User/pfx:IdTypeCode"/>
                                    </pfx3:IdTypeCode>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:IdNumber">
                                    <pfx3:IdNumber>
                                        <xsl:value-of select="Payer/pfx:User/pfx:IdNumber"/>
                                    </pfx3:IdNumber>
                                </xsl:if>
                                <xsl:if test="exists(Payer/pfx:User/pfx:BirthDate)">
                                    <pfx3:BirthDate>
                                        <xsl:value-of select="tib:create-dateTime(&#xA;&#x9;tib:get-year-from-dateTime(current()/Payer/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-month-from-dateTime(current()/Payer/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-day-from-dateTime(current()/Payer/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-hours-from-dateTime(current()/Payer/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-minutes-from-dateTime(current()/Payer/pfx:User/pfx:BirthDate),&#xA;&#x9;tib:get-seconds-from-dateTime(current()/Payer/pfx:User/pfx:BirthDate)&#xA;)"/>
                                    </pfx3:BirthDate>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:Address">
                                    <pfx3:Address>
                                        <xsl:value-of select="Payer/pfx:User/pfx:Address"/>
                                    </pfx3:Address>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:ScholarityCode">
                                    <pfx3:ScholarityCode>
                                        <xsl:value-of select="Payer/pfx:User/pfx:ScholarityCode"/>
                                    </pfx3:ScholarityCode>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:Scholarity">
                                    <pfx3:Scholarity>
                                        <xsl:value-of select="Payer/pfx:User/pfx:Scholarity"/>
                                    </pfx3:Scholarity>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:Gender">
                                    <pfx3:Gender>
                                        <xsl:value-of select="Payer/pfx:User/pfx:Gender"/>
                                    </pfx3:Gender>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:Email">
                                    <pfx3:Email>
                                        <xsl:value-of select="Payer/pfx:User/pfx:Email"/>
                                    </pfx3:Email>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:Phone">
                                    <pfx3:Phone>
                                        <xsl:value-of select="Payer/pfx:User/pfx:Phone"/>
                                    </pfx3:Phone>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:Mobile">
                                    <pfx3:Mobile>
                                        <xsl:value-of select="Payer/pfx:User/pfx:Mobile"/>
                                    </pfx3:Mobile>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:Occupation">
                                    <pfx3:Occupation>
                                        <xsl:value-of select="Payer/pfx:User/pfx:Occupation"/>
                                    </pfx3:Occupation>
                                </xsl:if>
                                <xsl:if test="Payer/pfx:User/pfx:AuthorizeDataUse">
                                    <pfx3:AuthorizeDataUse>
                                        <xsl:value-of select="Payer/pfx:User/pfx:AuthorizeDataUse"/>
                                    </pfx3:AuthorizeDataUse>
                                </xsl:if>
                                <xsl:if test="exists(Payer/pfx:User/pfx:LastUpdate)">
                                    <pfx3:LastUpdate>
                                        <xsl:value-of select="tib:create-dateTime(&#xA;&#x9;tib:get-year-from-dateTime(current()/Payer/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-month-from-dateTime(current()/Payer/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-day-from-dateTime(current()/Payer/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-hours-from-dateTime(current()/Payer/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-minutes-from-dateTime(current()/Payer/pfx:User/pfx:LastUpdate),&#xA;&#x9;tib:get-seconds-from-dateTime(current()/Payer/pfx:User/pfx:LastUpdate)&#xA;)"/>
                                    </pfx3:LastUpdate>
                                </xsl:if>
                            </pfx3:CardUser>
                        </Payer>
                    </xsl:if>
                    <xsl:if test="exists( pfx2:CardInfo)">
                        <pfx4:CardInfo>
                            <xsl:if test="pfx2:CardInfo/pfx2:CardNumber">
                                <pfx4:CardNumber>
                                    <xsl:value-of select="pfx2:CardInfo/pfx2:CardNumber"/>
                                </pfx4:CardNumber>
                            </xsl:if>
                            <xsl:if test="pfx2:CardInfo/pfx2:StatusCode">
                                <pfx4:StatusCode>
                                    <xsl:value-of select="pfx2:CardInfo/pfx2:StatusCode"/>
                                </pfx4:StatusCode>
                            </xsl:if>
                            <xsl:if test="pfx2:CardInfo/pfx2:Status">
                                <pfx4:Status>
                                    <xsl:value-of select="pfx2:CardInfo/pfx2:Status"/>
                                </pfx4:Status>
                            </xsl:if>
                            <xsl:if test="pfx2:CardInfo/pfx2:CardTypeCode">
                                <pfx4:CardTypeCode>
                                    <xsl:value-of select="pfx2:CardInfo/pfx2:CardTypeCode"/>
                                </pfx4:CardTypeCode>
                            </xsl:if>
                            <xsl:if test="pfx2:CardInfo/pfx2:CardType">
                                <pfx4:CardType>
                                    <xsl:value-of select="pfx2:CardInfo/pfx2:CardType"/>
                                </pfx4:CardType>
                            </xsl:if>
                            <xsl:if test="pfx2:CardInfo/pfx2:PrepaidBalance">
                                <pfx4:PrepaidBalance>
                                    <xsl:value-of select="pfx2:CardInfo/pfx2:PrepaidBalance"/>
                                </pfx4:PrepaidBalance>
                            </xsl:if>
                            <xsl:if test="pfx2:CardInfo/pfx2:PospaidBalance">
                                <pfx4:PospaidBalance>
                                    <xsl:value-of select="pfx2:CardInfo/pfx2:PospaidBalance"/>
                                </pfx4:PospaidBalance>
                            </xsl:if>
                            <xsl:if test="exists(pfx2:CardInfo/pfx2:CreatedAt)">
                                <pfx4:CreatedAt>
                                    <xsl:value-of select="tib:create-dateTime(&#xA;&#x9;tib:get-year-from-dateTime(current()/pfx2:CardInfo/pfx2:CreatedAt),&#xA;&#x9;tib:get-month-from-dateTime(current()/pfx2:CardInfo/pfx2:CreatedAt),&#xA;&#x9;tib:get-day-from-dateTime(current()/pfx2:CardInfo/pfx2:CreatedAt),&#xA;&#x9;tib:get-hours-from-dateTime(current()/pfx2:CardInfo/pfx2:CreatedAt),&#xA;&#x9;tib:get-minutes-from-dateTime(current()/pfx2:CardInfo/pfx2:CreatedAt),&#xA;&#x9;tib:get-seconds-from-dateTime(current()/pfx2:CardInfo/pfx2:CreatedAt)&#xA;)"/>
                                </pfx4:CreatedAt>
                            </xsl:if>
                            <xsl:if test="exists(pfx2:CardInfo/pfx2:LastModify)">
                                <pfx4:LastModify>
                                    <xsl:value-of select="tib:create-dateTime(&#xA;&#x9;tib:get-year-from-dateTime(current()/pfx2:CardInfo/pfx2:LastModify),&#xA;&#x9;tib:get-month-from-dateTime(current()/pfx2:CardInfo/pfx2:LastModify),&#xA;&#x9;tib:get-day-from-dateTime(current()/pfx2:CardInfo/pfx2:LastModify),&#xA;&#x9;tib:get-hours-from-dateTime(current()/pfx2:CardInfo/pfx2:LastModify),&#xA;&#x9;tib:get-minutes-from-dateTime(current()/pfx2:CardInfo/pfx2:LastModify),&#xA;&#x9;tib:get-seconds-from-dateTime(current()/pfx2:CardInfo/pfx2:LastModify)&#xA;)"/>
                                </pfx4:LastModify>
                            </xsl:if>
                        </pfx4:CardInfo>
                    </xsl:if>
                </Card>
            </xsl:for-each>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="Card" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="User">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element ref="pfx3:CardUser"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="Payer" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element ref="pfx3:CardUser"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element ref="pfx4:CardInfo" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>274</pd:endX>
    <pd:endY>90</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.rbsas.co/1459980587355</pd:targetNamespace>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>